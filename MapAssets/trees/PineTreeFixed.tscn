[gd_scene load_steps=7 format=4 uid="uid://cq5hc8s21orhv"]

[ext_resource type="PackedScene" uid="uid://iqs1ygahdihk" path="res://MapAssets/trees/pine_tree.glb" id="1_81b38"]
[ext_resource type="Texture2D" uid="uid://b28cpqn7oxm12" path="res://MapAssets/trees/pine_tree_pine_lowres.png" id="2_83dfi"]

[sub_resource type="Shader" id="Shader_b52i6"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_nearest_mipmap, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_nearest_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_nearest_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_emission : source_color, hint_default_black, filter_nearest_mipmap, repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy : hint_range(0.0, 100.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

// Wind sway parameters
uniform float wind_strength : hint_range(0.0, 2.0) = 0.1;
uniform float sway_speed : hint_range(0.0, 2.0) = 2.0;
uniform float sway_frequency : hint_range(0.0, 10.0) = 1.0;
uniform vec3 wind_direction = vec3(1.0, 0.0, 0.0);

void vertex() {
    // UV manipulation for texture mapping
    UV = UV * uv1_scale.xy + uv1_offset.xy;

    // Ensure wind_direction is normalized
    vec3 normalized_wind_direction = normalize(wind_direction);

    // Scale sway effect based on height (Y-axis)
    float height_factor = clamp(VERTEX.y, 0.0, 1.0); // Scale between 0 (bottom) and 1 (top)
    float sway = sin(TIME * sway_speed + VERTEX.x * sway_frequency) * wind_strength * height_factor;
    vec3 sway_offset = normalized_wind_direction * sway;
    VERTEX.xyz += sway_offset;
}

void fragment() {
    vec2 base_uv = UV;

    vec4 albedo_tex = texture(texture_albedo, base_uv);
    ALBEDO = albedo.rgb * albedo_tex.rgb;

    float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
    METALLIC = metallic_tex * metallic;
    SPECULAR = specular;

    vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
    float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
    ROUGHNESS = roughness_tex * roughness;

    // Emission: Enabled
    vec3 emission_tex = texture(texture_emission, base_uv).rgb;
    // Emission Operator: Add
    EMISSION = (emission.rgb + emission_tex) * emission_energy;
    ALPHA *= albedo.a * albedo_tex.a;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0oyoh"]
resource_name = "pine_tree"
render_priority = 0
shader = SubResource("Shader_b52i6")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.0
shader_parameter/metallic = 0.0
shader_parameter/emission = Color(0, 0, 0, 1)
shader_parameter/emission_energy = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/wind_strength = 0.5
shader_parameter/sway_speed = 1.0
shader_parameter/sway_frequency = 1.0
shader_parameter/wind_direction = Vector3(1, 0, 0)
shader_parameter/texture_albedo = ExtResource("2_83dfi")

[sub_resource type="ArrayMesh" id="ArrayMesh_gi6hu"]
_surfaces = [{
"aabb": AABB(-1.33788, 0, -1.41664, 2.83328, 4.9811, 2.83329),
"format": 34896613377,
"index_count": 42,
"index_data": PackedByteArray("AAACAAEAAAADAAIABAAGAAUABAAHAAYACAAHAAkACAAFAAoACAAEAAUABwAEAAkACwANAAwACwAOAA0ABwAKAAYABwAIAAoABAAIAAkACgAFAAYA"),
"name": "pine_tree",
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 15,
"vertex_data": PackedByteArray("/3/+//7/AAD/f68a/v8AAP9/rxoAAAAA/3/+/wAAAACod2NO+YEAAIlwAADQhAAAOoEAANCEAACvgmNO+YEAACt9Y05teAAAqHzGnP9/AADheAAAXHYAAAAA/v//fwAAAACvGv9/AAD//68a/38AAP///v//fwAA")
}]
blend_shape_mode = 0

[sub_resource type="ArrayMesh" id="ArrayMesh_0wq84"]
resource_name = "pine_tree_Cube_001"
_surfaces = [{
"aabb": AABB(-1.33788, 0, -1.41664, 2.83328, 4.9811, 2.83329),
"attribute_data": PackedByteArray("8QKOAPECoOEN/aDhDf2OALpzfraNcXz/CYEY/4596rZcdKC2NXp7bZl+oLZGdDq2HXEo/5qAfP+AfnG2jn3qtuN5sG66c362tQLMALUCSeJJ/UniSf3MAJl+oLY0gL//tXC//1x0oLaAfnG2JXq7bUZ0OrZ3fWH/d32G9gtw8/o="),
"format": 34896613399,
"index_count": 42,
"index_data": PackedByteArray("AAACAAEAAAADAAIABAAGAAUABAAHAAYACAAKAAkACwANAAwACwAOAA0ADwARABAAEgAUABMAEgAVABQAFgAYABcAFgAZABgAGgAcABsAHQAfAB4A"),
"material": SubResource("ShaderMaterial_0oyoh"),
"name": "pine_tree",
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 32,
"vertex_data": PackedByteArray("/3/+//7//7//f68a/v//v/9/rxoAAP+//3/+/wAA/7+od2NO+YHAgolwAADQhPuBOoEAANCEw4GvgmNO+YEYgyt9Y05teBUBqHzGnP9/FQGvgmNO+YEVASt9Y05teFHV4XgAAFx2UdWJcAAA0IRR1ah3Y075gVHVr4JjTvmBC4OofMac/38Lg6h3Y075gQuDAAD+//9//38AAK8a/3//f///rxr/f/9////+//9//3+vgmNO+YGvADqBAADQhK8A4XgAAFx2rwArfWNObXivAKh3Y075gVLVqHzGnP9/UtUrfWNObXhS1eF4AABcdrrCOoEAANCEusKJcAAA0IS6wv9/AAD/fwAA/38AAP9/AAAB/8gefqjkgJSs2YD5/ugbsdC2gLHQtoCx0LaAh4Op+4eDqfuHg6n7h4Op+zv/zhQ7/84UO//OFP9/////f////3////9///90ACKvdAAir3QAIq90ACKvMoOh/DKDofwyg6H8qSyqaaksqmmpLKpp")
}]
blend_shape_mode = 0
shadow_mesh = SubResource("ArrayMesh_gi6hu")

[node name="pine_tree" instance=ExtResource("1_81b38")]

[node name="PineTree" parent="." index="0"]
lod_bias = 54.073
mesh = SubResource("ArrayMesh_0wq84")
